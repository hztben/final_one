/*
 * controller.c
 *
 *  Created on: 2017-9-15
 *      Author: Ben
 */


#include <stdio.h>
#include "system.h"
#include "alt_types.h"
#include "math.h"
#include "JY901.h"
#include "timer.h"
#include "pwm.h"
#include "../i2c/i2c_opencores.h"
#include "us100.h"
#include "fbm320.h"
#include "controller.h"

extern float standardRoll;
extern float standardPitch;
extern float standardYaw;
extern float g_preLength;
extern unsigned char g_protectFlag;

void PIDInit(){
	rollPID.kp = 80;
	rollPID.ki = 0;
	rollPID.kd = 450;
	pitchPID.kp = 80;
	pitchPID.ki = 0;
	pitchPID.kd = 450;
	yawPID.kp = 1;
	yawPID.ki = 0;
	yawPID.kd = 0;
	heightPID.kp = 0.05;
	heightPID.ki = 0;
	heightPID.kd = 0;
}


float RollCalc(float setRoll){
	static float s_lastErr = 0;
	static float s_integral =0;
	float current;
	float err,output;
	current = read_JY901(Roll);
	err = setRoll + standardRoll - current;

	if(err > 180){
		err = err - 360;
	}
	if(err < -180){
		err = err + 360;
	}

	printf("roll: %f\n",err);

	if(err > 35){
		g_protectFlag = 0;
	}
	if(err < -35){
		g_protectFlag = 0;
	}
	s_integral = s_integral + err;
	output = rollPID.kp * err + rollPID.ki * s_integral + rollPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);

}

float PitchCalc(float setPitch){
	static float s_lastErr = 0;
	static float s_integral =0;
	float current;
	float err,output;
	current = read_JY901(Pitch);
	err = setPitch + standardPitch - current;

	if(err > 180){
		err = err - 360;
	}
	if(err < -180){
		err = err + 360;
	}

	printf("pitch: %f\n",err);

	if(err > 35){
		g_protectFlag = 0;
	}
	if(err < -35){
		g_protectFlag = 0;
	}
	s_integral = s_integral + err;
	output = pitchPID.kp * err + pitchPID.ki * s_integral + yawPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);

}

float YawCalc(float setYaw){
	static float s_lastErr = 0;
	static float s_integral =0;
	float current;
	float err,output;
	current = read_JY901(Yaw);
	err = setYaw + standardYaw - current;
	//printf("yaw err %f\n",err);
	if(err > 180){
		err = err - 360;
	}
	if(err < -180){
		err = err + 360;
	}
	s_integral = s_integral + err;
	output = yawPID.kp * err + yawPID.ki * s_integral + yawPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);

}

float HeightCalc(float setHeight){
	static float s_lastErr = 0;
	static float s_integral =0;
	float err,output;

	g_preLength = g_preLength/1000;
	err = setHeight - g_preLength;
	s_integral = s_integral + err;
	output = heightPID.kp * err + heightPID.ki * s_integral + heightPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);
}


