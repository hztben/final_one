/*
 * app.c
 *
 *  Created on: 2017-9-8
 *      Author: Ben
 */

#include <stdio.h>
#include "system.h"
#include "alt_types.h"
#include "math.h"
#include "JY901.h"
#include "timer.h"
#include "pwm.h"
#include "../i2c/i2c_opencores.h"
#include "us100.h"
#include "fbm320.h"
#include "app.h"
#include "unistd.h"

float standardRoll = 0;
float standardPitch = 0;
float standardYaw = 0;
alt_u16 fbm320Standard = 0;

extern float g_preLength;
extern unsigned char g_timeFlag;
extern unsigned char g_protectFlag;


void fbm320Init(){
	I2C_init(OPENCORES_I2C_FBM320_BASE,ALT_CPU_FREQ,100000);
	fbm320Standard = Read_FBM320();
}

void JY901Init(){
	I2C_init(OPENCORES_I2C_JY901_BASE,ALT_CPU_FREQ,100000);
	standardRoll = read_JY901(Roll);
	standardPitch = read_JY901(Pitch);
	standardYaw = read_JY901(Yaw);
	printf("standardRoll: %f\n",standardRoll);
	printf("standardPitch: %f\n",standardPitch);
	printf("standardYaw: %f\n",standardYaw);
}

void PIDInit(){
	rollPID.kp = 1000;
	rollPID.ki = 0;
	rollPID.kd = 0;
	pitchPID.kp = 1000;
	pitchPID.ki = 0;
	pitchPID.kd = 0;
	yawPID.kp = 1;
	yawPID.ki = 0;
	yawPID.kd = 0;
	heightPID.kp = 0.05;
	heightPID.ki = 0;
	heightPID.kd = 0;
}

void bspInit(){
	moto_init();
	PIDInit();
	fbm320Init();
	JY901Init();
	Uart_232_initial();
	TimerInit();
}

float RollCalc(float setRoll){
	static float s_lastErr = 0;
	static float s_integral =0;
	float current;
	float err,output;
	current = read_JY901(Roll);
	err = setRoll + standardRoll - current;

	if(err > 180){
		err = err - 360;
	}
	if(err < -180){
		err = err + 360;
	}

	printf("roll: %f\n",err);

	if(err > 35){
		g_protectFlag = 0;
	}
	if(err < -35){
		g_protectFlag = 0;
	}
	s_integral = s_integral + err;
	output = rollPID.kp * err + rollPID.ki * s_integral + rollPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);

}

float PitchCalc(float setPitch){
	static float s_lastErr = 0;
	static float s_integral =0;
	float current;
	float err,output;
	current = read_JY901(Pitch);
	err = setPitch + standardPitch - current;

	if(err > 180){
		err = err - 360;
	}
	if(err < -180){
		err = err + 360;
	}

	printf("pitch: %f\n",err);

	if(err > 35){
		g_protectFlag = 0;
	}
	if(err < -35){
		g_protectFlag = 0;
	}
	s_integral = s_integral + err;
	output = pitchPID.kp * err + pitchPID.ki * s_integral + yawPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);

}

float YawCalc(float setYaw){
	static float s_lastErr = 0;
	static float s_integral =0;
	float current;
	float err,output;
	current = read_JY901(Yaw);
	err = setYaw + standardYaw - current;
	//printf("yaw err %f\n",err);
	if(err > 180){
		err = err - 360;
	}
	if(err < -180){
		err = err + 360;
	}
	s_integral = s_integral + err;
	output = yawPID.kp * err + yawPID.ki * s_integral + yawPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);

}

float HeightCalc(float setHeight){
	static float s_lastErr = 0;
	static float s_integral =0;
	float err,output;

	g_preLength = g_preLength/1000;
	err = setHeight - g_preLength;
	s_integral = s_integral + err;
	output = heightPID.kp * err + heightPID.ki * s_integral + heightPID.kd * (err - s_lastErr);
	s_lastErr = err;
	return (output);
}



void MotorControl(){
	float rollOut,pitchOut,yawOut;
	static int heightOut;
	int rotorOutFirst,rotorOutSecond,rotorOutThird,rotorOutFourth;
	float omega1,omega2,omega3,omega4;

	float J_x = 0.01444,J_y = 0.01444,J_z = 0.02770;
	float rollTau,pitchTau,yawTau,T;
	const float m = 80;
	const float g = 9.8;

	rollOut = RollCalc(0);
	pitchOut = PitchCalc(0);
	yawOut = YawCalc(0);
	heightOut = HeightCalc(1.06);

	heightOut = 0;					//test

	rollTau = J_x * rollOut;
	pitchTau = J_y * pitchOut;
	yawTau = 0;//J_z * yawOut;
	T = m*(heightOut + g);

	omega1 = sqrt(9972.078181 * T + 44320.34747 * rollTau + 44320.34747 * pitchTau + 367917.5865 * yawTau);
	omega2 = sqrt(9972.078181 * T + 44320.34747 * rollTau - 44320.34747 * pitchTau - 367917.5865 * yawTau);
	omega3 = sqrt(9972.078181 * T - 44320.34747 * rollTau - 44320.34747 * pitchTau + 367917.5865 * yawTau);
	omega4 = sqrt(9972.078181 * T - 44320.34747 * rollTau + 44320.34747 * pitchTau - 367917.5865 * yawTau);

	//printf("omega: %f\n",omega1);

	rotorOutFirst = (int)((omega1/980+5.30)*10000);
	rotorOutSecond = (int)((omega2/980+5.30)*10000);
	rotorOutThird = (int)((omega3/980+5.28)*10000);
	rotorOutFourth = (int)((omega4/980+5.30)*10000);

	/*if(g_preLength < 1060){
		rotorOutFirst = rotorOutFirst + 8.3;
		rotorOutSecond = rotorOutSecond + 8.3;
		rotorOutThird = rotorOutThird + 8.3;
		rotorOutFourth = rotorOutFourth + 8.3;
	}
	if(g_preLength > 1060){
		rotorOutFirst = 8.3 - rotorOutFirst;
		rotorOutSecond = 8.3 - rotorOutSecond;
		rotorOutThird = 8.3 - rotorOutThird;
		rotorOutFourth = 8.3 - rotorOutFourth;
	}*/

	printf("rotorOut: %d , %d , %d , %d \n",rotorOutFirst,rotorOutSecond,rotorOutThird,rotorOutFourth);

	/*rotorOutFirst = rollOut-pitchOut+yawOut+8;
	rotorOutSecond = rollOut+pitchOut-yawOut+8;
	rotorOutThird = -rollOut+pitchOut+yawOut+8;
	rotorOutFourth = -rollOut-pitchOut-yawOut+8;
	printf("Rotor 1 : %f\n",rotorOutFirst);*/


	if(rotorOutFirst < 60000){
		rotorOutFirst = 60000;
	}
	if(rotorOutFirst >90000){
		rotorOutFirst = 90000;
	}

	if(rotorOutSecond < 60000){
		rotorOutSecond = 60000;
	}
	if(rotorOutSecond > 90000){
		rotorOutSecond = 90000;
	}

	if(rotorOutThird < 60000){
		rotorOutThird = 60000;
	}
	if(rotorOutThird > 90000){
		rotorOutThird = 90000;
	}

	if(rotorOutFourth < 60000){
		rotorOutFourth = 60000;
	}
	if(rotorOutFourth > 90000){
		rotorOutFourth = 90000;
	}


	moto_setting(1,50,rotorOutFirst);//电机-周期-占空比
	moto_setting(2,50,rotorOutSecond); //电机-周期-占空比
	moto_setting(3,50,rotorOutThird); //电机-周期-占空比
	moto_setting(4,50,rotorOutFourth);//电机-周期-占空比

}

